using Business.Dtos;
using Business.Interfaces;
using Business.Models;
using Business.Services;
using Moq;
using System.Reflection;

namespace Business.Tests.Services;

public class ContactService_Tests
{
    private readonly Mock<IFileService> _fileServiceMock;
    private readonly IContactService _contactService;

    public ContactService_Tests()
    {
        _fileServiceMock = new Mock<IFileService>();
        _contactService = new ContactService(_fileServiceMock.Object);
    }

    //Most of the tests were generated by GitHub Copilot

    [Fact]
    public void AddContact_WhenCalled_ReturnsTrue()
    {
        // Arrange
        var contactForm = new NewContactForm
        {
            FirstName = "John",
            LastName = "Doe",
            Email = "john@doe.com",
            Phone = "1234567890",
            Address = "1234 Elm St",
            PostalCode = "12345",
            City = "Springfield"
        };

        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.AddContact(contactForm);

        // Assert
        Assert.True(result);
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()), Times.Once);
    }


    [Fact]
    public void GetAllContacts_WhenCalled_ReturnsAllContacts()
    {
        // Arrange
        var contacts = TestData.TwoContactsList;
        _fileServiceMock
            .Setup(fs => fs.LoadListFromFile())
            .Returns(contacts);

        // Act
        var result = _contactService.GetAllContacts();

        // Assert
        Assert.Equal(contacts, result);
    }

    [Fact]
    public void UpdateContact_WhenContactExists_UpdatesAndSavesList()
    {
        // Arrange
        var existingContact = new Contact
        {
            Id = "49f7b1b2",
            FirstName = "Jane",
            LastName = "Doe",
            Email = "ridah@gmail.com",
            Phone = "0987654321",
            Address = "4321 Oak St",
            PostalCode = "54321",
            City = "Shelbyville"
        };

        var updatedContact = new Contact
        {
            Id = existingContact.Id,
            FirstName = "Updated",
            LastName = "Name",
            Email = "ridah@gmail.com",
            Phone = "0987654321",
            Address = "4321 Oak St",
            PostalCode = "54321",
            City = "Shelbyville"
        };

        var contactsField = typeof(ContactService)
            .GetField("_contacts", BindingFlags.NonPublic | BindingFlags.Instance);
        var contacts = new List <Contact>{existingContact};
        contactsField?.SetValue(_contactService, contacts);


        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.UpdateContact(updatedContact);

        //Compaing the updated contact with the existing contact
        // Assert
        Assert.True(result);
        Assert.Equal("Updated", existingContact.FirstName);
        Assert.Equal("Name", existingContact.LastName);
        Assert.Equal("ridah@gmail.com", existingContact.Email);
        Assert.Equal("0987654321", existingContact.Phone);
        Assert.Equal("4321 Oak St", existingContact.Address);
        Assert.Equal("54321", existingContact.PostalCode);
        Assert.Equal("Shelbyville", existingContact.City);

        //Checking if the list was saved with the new updated contact
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.Is<List<Contact>>(list => list.Any(c => c.Id == updatedContact.Id
           && c.FirstName == "Updated"))), Times.Once);


    }


    //This test was written manually with a helping hand from GitHub Copilot
    [Fact]
    public void DeleteContact_WhenContactExists_DeletesAndUpdatesList()
    {
        // Arrange
        var contact = TestData.TwoContactsList.First();

        var contactsField = typeof(ContactService)
            .GetField("_contacts", BindingFlags.NonPublic | BindingFlags.Instance);
        var contacts = new List<Contact>(TestData.TwoContactsList);
        contactsField?.SetValue(_contactService, contacts);

        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.DeleteContact(contact);

        // Assert
        Assert.True(result);
        var updatedContacts = contactsField?.GetValue(_contactService) as List<Contact>;
        Assert.NotNull(updatedContacts);
        Assert.DoesNotContain(contact, updatedContacts);
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.Is<List<Contact>>(list => !list.Any(c => c.Id == contact.Id))), Times.Once);
    }


    [Fact]
    public void GetAllContacts_ShouldReturnListOfContacts()
    {
        // Arrange
        var contacts = TestData.TwoContactsList;
        _fileServiceMock.Setup(fs => fs.LoadListFromFile())
            .Returns(contacts);

        // Act
        var result = _contactService.GetAllContacts();

        // Assert
        Assert.IsType<List<Contact>>(result);
        Assert.NotNull(result);
        Assert.Equal(contacts, result);
        Assert.Equal(contacts[0].Id, result.First().Id);
    }
}





