using Business.Dtos;
using Business.Interfaces;
using Business.Models;
using Business.Services;
using Moq;

namespace Business.Tests.Services;

public class ContactService_Tests
{
    private readonly Mock<IFileService> _fileServiceMock;
    private readonly IContactService _contactService;

    public ContactService_Tests()
    {
        _fileServiceMock = new Mock<IFileService>();
        _contactService = new ContactService(_fileServiceMock.Object);
    }

    //Most of the tests were generated by GitHub Copilot

    [Fact]
    public void AddContact_WhenCalled_ReturnsTrue()
    {
        // Arrange
        var contactForm = new NewContactForm
        {
            FirstName = "John",
            LastName = "Doe",
            Email = "john@doe.com",
            Phone = "1234567890",
            Address = "1234 Elm St",
            PostalCode = "12345",
            City = "Springfield"
        };

        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.AddContact(contactForm);

        // Assert
        Assert.True(result);
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()), Times.Once);
    }


    [Fact]
    public void GetAllContacts_WhenCalled_ReturnsAllContacts()
    {
        // Arrange
        var contacts = TestData.TwoContactsList;
        _fileServiceMock
            .Setup(fs => fs.LoadListFromFile())
            .Returns(contacts);

        // Act
        var result = _contactService.GetAllContacts();

        // Assert
        Assert.Equal(contacts, result);
    }

    [Fact]
    public void UpdateContact_WhenCalled_ReturnsTrue()
    {
        // Arrange
        var contact = new Contact
        {
            Id = "49f7b1b1",
            FirstName = "John",
            LastName = "Doe",
            Email = "john@doe.com",
            Phone = "1234567890",
            Address = "1234 Elm St",
            PostalCode = "12345",
            City = "Springfield"
        };

        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.UpdateContact(contact);

        // Assert
        Assert.True(result);
        _fileServiceMock.Verify(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()), Times.Once);
    }

    [Fact]
    public void DeleteContact_WhenCalled_ReturnsTrue()
    {
        // Arrange
        var contact = new Contact
        {
            Id = "49f7b1b1",
            FirstName = "John",
            LastName = "Doe",
            Email = "john@doe.com",
            Phone = "1234567890",
            Address = "1234 Elm St",
            PostalCode = "12345",
            City = "Springfield"
        };

        _fileServiceMock.Setup(fs => fs.SaveListToFile(It.IsAny<List<Contact>>()))
            .Returns(true);

        // Act
        var result = _contactService.DeleteContact(contact);
        Assert.True(result);
    }

    [Fact]
    public void GetAllContacts_ShouldReturnListOfContacts()
    {
        // Arrange
        var contacts = TestData.TwoContactsList;
        _fileServiceMock.Setup(fs => fs.LoadListFromFile())
            .Returns(contacts);

        // Act
        var result = _contactService.GetAllContacts();

        // Assert
        Assert.IsType<List<Contact>>(result);
        Assert.NotNull(result);
        Assert.Equal(contacts, result);
        Assert.Equal(contacts[0].Id, result.First().Id);
    }
}





